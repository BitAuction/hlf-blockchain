/*
 * Copyright IBM Corp. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * MODIFICATION NOTICE:
 * files been generalized from original and generated during setup
 */

'use strict';

const { Gateway, Wallets } = require('fabric-network');
const path = require('path');
const { DateTime, Duration } = require('luxon');
const { buildCCPOrgx, buildWallet, prettyJSONString} = require('../../test-application/javascript/AppUtil.js');

const myChannel = 'mychannel';
const myChaincodeName = 'auction';

async function createAuction(ccp, wallet, user, auctionID, item, timelimit, desc, imageurl) {
	try {
		const gateway = new Gateway();

		// Connect using Discovery enabled
		await gateway.connect(ccp, {
			wallet: wallet,
			identity: user,
			discovery: { enabled: true, asLocalhost: true }
		});

		const network = await gateway.getNetwork(myChannel);
		const contract = network.getContract(myChaincodeName);

		let statefulTxn = contract.createTransaction('CreateAuction');

		console.log('\n--> Submit Transaction: Propose a new auction');
		await statefulTxn.submit(auctionID, item, timelimit, desc, imageurl);
		console.log('*** Result: committed');

		console.log('\n--> Evaluate Transaction: query the auction that was just created');
		let result = await contract.evaluateTransaction('QueryAuction', auctionID);
		console.log('*** Result: Auction: ' + prettyJSONString(result.toString()));

		gateway.disconnect();
	} catch (error) {
		console.error(`******** FAILED to submit auction: ${error}`);
	}
}

async function main() {
	try {
		if (
			process.argv[2] === undefined || process.argv[3] === undefined ||
			process.argv[4] === undefined || process.argv[5] === undefined ||
			process.argv[6] === undefined || process.argv[7] === undefined ||
			process.argv[8] === undefined
		) {
			console.log('Usage: node createAuction.js org userID auctionID item timelimitDelta desc imageurl');
			process.exit(1);
		}

		const org = process.argv[2];
		const user = process.argv[3];
		const auctionID = process.argv[4];
		const item = process.argv[5];
		const delta = process.argv[6];
		const desc = process.argv[7];
		const imageurl = process.argv[8];

		const now = new Date();
		const today = new Date(
			now.getFullYear(),
			now.getMonth(),
			now.getDate(),
			now.getHours(),
			now.getMinutes(),
			now.getSeconds(),
			now.getMilliseconds()
		);
		const final = DateTime.fromJSDate(today).plus(Duration.fromISO(delta)).toISO();
		console.log('Final time: ' + final);

		let ccp, walletPath, wallet;

		if (org === 'Org1' || org === 'org1') {
			ccp = buildCCPOrg1();
			walletPath = path.join(__dirname, 'wallet/org1');
			wallet = await buildWallet(Wallets, walletPath);
			await createAuction(ccp, wallet, user, auctionID, item, final, desc, imageurl);
		}
		//PutNewMainStuff
		else {
			console.log('Usage: node createAuction.js org userID auctionID item timelimitDelta desc imageurl');
			console.log('Org must be Org1, Org2, Org3, or Org4');
			process.exit(1);
		}
	} catch (error) {
		console.error(`******** FAILED to run the application: ${error}`);
	}
}

main();
