/*
 * Copyright IBM Corp. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * MODIFICATION NOTICE: 
 * files been generalized from original and generated during setup
 */

'use strict';

const { Gateway, Wallets } = require('fabric-network');
const path = require('path');
const { buildCCPOrg1, buildCCPOrg2, buildCCPOrg3, buildCCPOrg4, buildWallet, prettyJSONString} = require('../../test-application/javascript/AppUtil.js');

const myChannel = 'mychannel';
const myChaincodeName = 'auction';

async function testWriteData(ccp, wallet, user) {
	try {
		const gateway = new Gateway();

		// Connect using Discovery enabled
		await gateway.connect(ccp, {
			wallet: wallet,
			identity: user,
			discovery: { enabled: true, asLocalhost: true }
		});

		const network = await gateway.getNetwork(myChannel);
		const contract = network.getContract(myChaincodeName);

		console.log('\n--> Submit Transaction: TestWriteData');
		await contract.submitTransaction('TestWriteData');
		console.log('*** Result: Test data written successfully');

		gateway.disconnect();
	} catch (error) {
		console.error(`******** FAILED to write test data: ${error}`);
		if (error.stack) {
			console.error(error.stack);
		}
		process.exit(1);
	}
}

async function main() {
	try {
		if (process.argv[2] === undefined || process.argv[3] === undefined) {
			console.log('Usage: node testWriteData.js org userID');
			process.exit(1);
		}

		const org = process.argv[2];
		const user = process.argv[3];

		if (org === 'Org1' || org === 'org1') {
			const ccp = buildCCPOrg1();
			const walletPath = path.join(__dirname, 'wallet/org1');
			const wallet = await buildWallet(Wallets, walletPath);
			await testWriteData(ccp, wallet, user);
		}
		else if (org === 'Org2' || org === 'org2') {
			const ccp = buildCCPOrg2();
			const walletPath = path.join(__dirname, 'wallet/org2');
			const wallet = await buildWallet(Wallets, walletPath);
			await testWriteData(ccp, wallet, user);
		}
		else if (org === 'Org3' || org === 'org3') {
			const ccp = buildCCPOrg3();
			const walletPath = path.join(__dirname, 'wallet/org3');
			const wallet = await buildWallet(Wallets, walletPath);
			await testWriteData(ccp, wallet, user);
		}
		else if (org === 'Org4' || org === 'org4') {
			const ccp = buildCCPOrg4();
			const walletPath = path.join(__dirname, 'wallet/org4');
			const wallet = await buildWallet(Wallets, walletPath);
			await testWriteData(ccp, wallet, user);
		}
		else {
			console.log('Usage: node testWriteData.js org userID');
			console.log('Org must be Org1, Org2, Org3, or Org4');
		}
	} catch (error) {
		console.error(`******** FAILED to run the application: ${error}`);
		if (error.stack) {
			console.error(error.stack);
		}
		process.exit(1);
	}
}

main();
