/*
 * Simple script to interact with TimeOracleChaincode
 * Usage: node timeOracle.js org userID txID
 */

'use strict';

const { Gateway, Wallets } = require('fabric-network');
const path = require('path');
const { buildCCPOrg1, buildCCPOrg2, buildCCPOrg3, buildCCPOrg4, buildWallet, prettyJSONString} = require('../../test-application/javascript/AppUtil.js');

const myChannel = 'mychannel';
const myChaincodeName = 'timeoracle'; // Update this to match your chaincode name

async function getTimeNtp(ccp, wallet, user, orgMSP, txID) {
    try {
        const gateway = new Gateway();
        // Connect using Discovery enabled
        await gateway.connect(ccp, {
            wallet: wallet,
            identity: user,
            discovery: { enabled: true, asLocalhost: true }
        });

        const network = await gateway.getNetwork(myChannel);
        const contract = network.getContract(myChaincodeName);

        console.log('\n--> Submit Transaction: GetTimeNtp');
        console.log(`*** Getting NTP time for transaction ID: ${txID}`);
        
        let result = await contract.submitTransaction('GetTimeNtp', txID);
        console.log('*** Result: NTP Timestamp: ' + result.toString());

        gateway.disconnect();
        return result.toString();
    } catch (error) {
        console.error(`******** FAILED to get NTP time: ${error}`);
        if (error.stack) {
            console.error(error.stack);
        }
        process.exit(1);
    }
}

async function main() {
    try {
        if (process.argv[2] === undefined || process.argv[3] === undefined || process.argv[4] === undefined) {
            console.log('Usage: node timeOracle.js org userID txID [action]');
            console.log('  org: Org1, Org2, Org3, or Org4');
            console.log('  userID: user identity in the wallet');
            console.log('  txID: transaction ID to store/retrieve timestamp');
            console.log('  action: "get" (default) or "query"');
            console.log('    get: Submit transaction to get new NTP time');
            console.log('    query: Query existing timestamp for txID');
            process.exit(1);
        }
        
        const org = process.argv[2];
        const user = process.argv[3];
        const txID = process.argv[4];
        console.log("client is working with org: " + org);

        let ccp, orgMSP, walletPath;

        if (org === 'Org1' || org === 'org1') {
            orgMSP = 'Org1MSP';
            ccp = buildCCPOrg1();
            walletPath = path.join(__dirname, 'wallet/org1');
        } else if (org === 'Org2' || org === 'org2') {
            orgMSP = 'Org2MSP';
            ccp = buildCCPOrg2();
            walletPath = path.join(__dirname, 'wallet/org2');
        } else if (org === 'Org3' || org === 'org3') {
            orgMSP = 'Org3MSP';
            ccp = buildCCPOrg3();
            walletPath = path.join(__dirname, 'wallet/org3');
        } else if (org === 'Org4' || org === 'org4') {
            orgMSP = 'Org4MSP';
            ccp = buildCCPOrg4();
            walletPath = path.join(__dirname, 'wallet/org4');
        } else {
            console.log('Usage: node timeOracle.js org userID txID [action]');
            console.log('Org must be Org1, Org2, Org3, or Org4');
            process.exit(1);
        }

        const wallet = await buildWallet(Wallets, walletPath);
        await getTimeNtp(ccp, wallet, user, orgMSP, txID);

    } catch (error) {
        console.error(`******** FAILED to run the application: ${error}`);
        process.exit(1);
    }
}

main();